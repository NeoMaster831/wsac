using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;


namespace WsACService.Generator;

[Generator]
public class HandlerCollectionGenerator : IIncrementalGenerator
{
    private const string AttributeSourceCode =
        """
        // <auto-generated/>

        namespace WsACService.Net;

        [System.AttributeUsage(System.AttributeTargets.Class)]
        public class FrameHandlerAttribute : System.Attribute;
        """;

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(ctx => ctx.AddSource(
            "FrameHandlerAttribute.g.cs",
            SourceText.From(AttributeSourceCode, Encoding.UTF8)));

        var provider = context.SyntaxProvider
            .CreateSyntaxProvider(
                (s,   _) => s is ClassDeclarationSyntax,
                (ctx, _) => GetClassDeclaration(ctx))
            .Where(t => t.Found)
            .Select((t, _) => t.Item1);

        context.RegisterSourceOutput(context.CompilationProvider.Combine(provider.Collect()),
            (ctx, t) => GenerateCode(ctx, t.Left, t.Right));
    }

    private static (ClassDeclarationSyntax, bool Found) GetClassDeclaration(GeneratorSyntaxContext ctx)
    {
        var clsDecl = (ClassDeclarationSyntax)ctx.Node;

        foreach (var attrList in clsDecl.AttributeLists)
        foreach (var attr in attrList.Attributes)
        {
            if (ctx.SemanticModel.GetSymbolInfo(attr).Symbol is not IMethodSymbol attrSymbol)
                continue;

            var attributeName = attrSymbol.ContainingType.ToDisplayString();

            if (attributeName == "WsACService.Net.FrameHandlerAttribute")
                return (clsDecl, true);
        }

        return (clsDecl, false);
    }

    private static void GenerateCode(
        SourceProductionContext                context,
        Compilation                            compilation,
        ImmutableArray<ClassDeclarationSyntax> classDecls)
    {
        var builder = new StringBuilder()
            .AppendLine("// <auto-generated/>")
            .AppendLine()
            .AppendLine("namespace WsACService.Net;")
            .AppendLine()
            .AppendLine("public partial class FrameHandler {")
            .AppendLine("    public static global::WsACService.Net.Abstractions.IFrameHandler[] All { get; } = {");
        foreach (var classDecl in classDecls)
        {
            var semanticModel = compilation.GetSemanticModel(classDecl.SyntaxTree);
            if (semanticModel.GetDeclaredSymbol(classDecl) is not INamedTypeSymbol classSymbol)
                continue;

            var namespaceName = classSymbol.ContainingNamespace.ToDisplayString();
            var className     = classDecl.Identifier.Text;

            builder.AppendLine($"        new global::{namespaceName}.{className}(),");
        }

        builder
            .AppendLine("    };")
            .AppendLine("}")
            .AppendLine();

        // Add the source code to the compilation.
        context.AddSource("FrameHandler.g.cs", SourceText.From(builder.ToString(), Encoding.UTF8));
    }
}